<?xml version="1.0" encoding="utf-8"?>
<project title="API Documentation" version="2.4.0&#10;">
  <partials/>
  <file path="Node/Node.php" generated-path="Node.Node.html" hash="eb8001ba11d7fa2866068718f40a8f05" package="global">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
    </docblock>
    <function namespace="LiquidWeb\NetMapSvc\Node" line="22" package="global">
      <name>availableTypes</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\availableTypes()</full_name>
      <docblock line="22">
        <description></description>
        <long-description></long-description>
        <tag name="return" line="22" description="An array describing the available node types including class name, neo4j label, specified properties, and valid relation types" type="array">
          <type>array</type>
        </tag>
      </docblock>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Node" line="62" package="global">
      <name>makeNew</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\makeNew()</full_name>
      <docblock line="62">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="62" description="&lt;p&gt;The name of the node to be created&lt;/p&gt;" type="string" variable="$nodeName">
          <type>string</type>
        </tag>
        <tag name="param" line="62" description="&lt;p&gt;The class name of the node type you wish to instantiate&lt;/p&gt;" type="string" variable="$nodeClass">
          <type>string</type>
        </tag>
        <tag name="param" line="62" description="&lt;p&gt;The properties or traits, if any, you want to pass to the node upon instantiation&lt;/p&gt;" type="array" variable="$nodeProperties">
          <type>array</type>
        </tag>
        <tag name="return" line="62" description="Returns an object of the type" type="object">
          <type>object</type>
        </tag>
        <tag name="throws" line="62" description="Throws an exception if there is a failure on property creation" type="\LiquidWeb\NetMapSvc\Node\Exception">
          <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
        </tag>
        <tag name="throws" line="62" description="Throws an exception if an invalid node type is supplied" type="\LiquidWeb\NetMapSvc\Node\Exception">
          <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$nodeName</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$nodeClass</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$nodeProperties</name>
        <default>NULL</default>
        <type>array</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Node" line="91" package="global">
      <name>setPropOrTrait</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\setPropOrTrait()</full_name>
      <docblock line="91">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="91" description="&lt;p&gt;The node object to have the property or trait set on. Will overwrite any existing values&lt;/p&gt;" type="object" variable="$nodeObj">
          <type>object</type>
        </tag>
        <tag name="param" line="91" description="&lt;p&gt;The name of the property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
          <type>string</type>
        </tag>
        <tag name="param" line="91" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
          <type>mixed</type>
        </tag>
        <tag name="return" line="91" description="Returns the set trait or property and the value" type="array">
          <type>array</type>
        </tag>
        <tag name="throws" line="91" description="" type="\LiquidWeb\NetMapSvc\Node\Exception">
          <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="true">
        <name>$nodeObj</name>
        <default></default>
        <type>object</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$property</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$value</name>
        <default></default>
        <type>mixed</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Node" line="113" package="global">
      <name>removePropOrTrait</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\removePropOrTrait()</full_name>
      <docblock line="113">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="113" description="&lt;p&gt;The object to remove the property or trait from&lt;/p&gt;" type="object" variable="$nodeObj">
          <type>object</type>
        </tag>
        <tag name="param" line="113" description="&lt;p&gt;The property or trait you want to remove/unset&lt;/p&gt;" type="string" variable="$property">
          <type>string</type>
        </tag>
        <tag name="return" line="113" description="" type="void">
          <type>void</type>
        </tag>
        <tag name="throws" line="113" description="Removes the specified property or trait." type="\LiquidWeb\NetMapSvc\Node\Exception">
          <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="true">
        <name>$nodeObj</name>
        <default></default>
        <type>object</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$property</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Node" line="131" package="global">
      <name>instantiateUpdate</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\instantiateUpdate()</full_name>
      <docblock line="131">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="131" description="&lt;p&gt;Loads the node to be either created or updated by reference and pushed to neo4j. Loaded by reference so that the object can have its $neo4jObj property set if being instantiated&lt;/p&gt;" type="object" variable="$nodeObj">
          <type>object</type>
        </tag>
        <tag name="return" line="131" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="true">
        <name>$nodeObj</name>
        <default></default>
        <type>object</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Node" line="179" package="global">
      <name>fromNeo4j</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\fromNeo4j()</full_name>
      <docblock line="179">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="179" description="&lt;p&gt;The ID of the neo4j node you want to import&lt;/p&gt;" type="int" variable="$id">
          <type>int</type>
        </tag>
        <tag name="return" line="179" description="Returns an object based on the neo4j node imported" type="object">
          <type>object</type>
        </tag>
        <tag name="throws" line="179" description="Throws an exception if the node doesn't exist" type="\LiquidWeb\NetMapSvc\Node\Exception">
          <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$id</name>
        <default></default>
        <type>int</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Node" line="208" package="global">
      <name>delete</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\delete()</full_name>
      <docblock line="208">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="208" description="&lt;p&gt;The id of the neo4j node you want to delete&lt;/p&gt;" type="int" variable="$id">
          <type>int</type>
        </tag>
        <tag name="return" line="208" description="Returns TRUE on sucess, FALSE if the node doesn't exist" type="bool">
          <type>bool</type>
        </tag>
        <tag name="throws" line="208" description="Throws an exception if the node can't be deleted, ususally because it's part of a relation" type="\LiquidWeb\NetMapSvc\Node\Exception">
          <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$id</name>
        <default></default>
        <type>int</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Node" line="234" package="global">
      <name>search</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\search()</full_name>
      <docblock line="234">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="234" description="&lt;p&gt;Whether to search against properties or a labels&lt;/p&gt;" type="string" variable="$searchOn">
          <type>string</type>
        </tag>
        <tag name="param" line="234" description="&lt;p&gt;The value(s) to search for. In the case of property search, keyed by the property&lt;/p&gt;" type="array" variable="$searchValues">
          <type>array</type>
        </tag>
        <tag name="return" line="234" description="An array of localized nodes or null" type="array">
          <type>array</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$searchOn</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$searchValues</name>
        <default></default>
        <type>array</type>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="22" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Node\availableTypes()</error>
      <error line="62" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Node\makeNew()</error>
      <error line="91" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Node\setPropOrTrait()</error>
      <error line="113" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Node\removePropOrTrait()</error>
      <error line="131" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Node\instantiateUpdate()</error>
      <error line="179" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Node\fromNeo4j()</error>
      <error line="208" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Node\delete()</error>
      <error line="234" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Node\search()</error>
    </parse_markers>
    <source>eJy1Wd1T20gSf7b/inlwnUTKwF3VPsHCLpd4E7YcJ2dg8wAUO5bG9oAsKRoJ49vK/37dPaOZkZBNSN2mihhL/TX98evu4edf8mXeT/lKqJxHgo3l10rGX8TsZiLKjzy/eIxuJlksjvuVEuym4/VxvxDwsBBhLAsUFN7d/XY+Ht3d7bEDFhy+E3OZylJmqTp8L1JRyOgAdAZ7r2H8IBfLsXgUyetZx9m6wdnv9XuHb970e+wNo/9+5VW5zAr2O1dZyt7LJFnxlP1eHLCf7xf6268JnXstZgdRtjp1vJ+L7FHGQrF5lUakj5UZk6kqeVpKXgqWgvNYNrsXUamGjCu2FkmCn3nNyllVykSWGyuEgTXlOkMN+HPYtxZrgwtRVkXKeFHwDTurfwFZUSFnMl2wcikYf+Qy4bPEmFBuctAl0yipYiSJEq4UQ98NWSqyn+4ZEItkyFQuIjmXIkYLc1GUUqDhacweeSJjVoiEk5Ek0dnYs9ZbzZdIEe71e3/1e71BqqZiIZ7YCYMIBRCnvBCLu69VVmL4JmcfRxefz97WMbyBf4fBMTGC/ShqLFUJ3MS2KEQe1iKHbCHKu1jAmQoR39HRUDFFu3d4yEaJXMkUw8Fnqix4VHpOAZJ5VggeLcOmKgjSQMZg8CmjF29RLpyGjtMbkJpLoUpRgFWpWLObqZgngpxAtKHHhifpyXnos+2fSnVmDAJrkYJE96pUibJpzTWacqvFfOs7Gk8cvcR3HnutfOchOw5XilWOdW9O5kjCoH4VaGOsOHVNkVE55LIXGk/69b9ub68DyrYxJltwC+Ktqv1TyOtCQq1OjMTwBzW4xG1rSODIn+3bH5Vfl8Az8fUB/sBKmdZURo2JSk39QrRMjTvbgPxbGwhyXvAVgwTCiibSCRQ0u4Tyx8pm2ZygQOd6xmaCRZADpYi3sZMBxO/woSkFTGGbrGJrqZYtrPOFakgimc7fJNgFh2Cu4BKBUc4BYjZDLRrkoegcLYBPq7zKAV2cQvBtAw81yrIpfQNctU/MAdB2zVAui2yt2OgpEjlB1qV+ACzCPpPEVQgmEaPngGkVfIEX5gQb7UxrxfcK5XgGjaXOpaBDVTkkno5NG1JX/EFMxDq0MfazcrjF2ydscjUeG/gF6CGquwexuRNPUAc+PA2fgfaewwKXGCesAdQapxHKHQ2lellsHJiZ6LRgpH0SZ7eHcREvAbBunEsHwkNJcrgGXksRDqAMoRt8FErxBSAI2sj2WZRVCfq7NBVAbF5vDpxW/BGJEvX5O9UE5+0QHrGmI+r63lK0JjWJ/tPsXtesswfzfskfBSWuTbi6YBggBmTiAfsC8wnLHkWxLiR2t3TDKLZY0GBfpRt0u9KtvDZQPFfk1yMo9aWt5BMMCQNSQ5L0b68T1Rhl6spFfjyh5gMBVhiOIWWtakvZddUPSMME+1RcoshwoedQanD/qEMwdI4ZmmOZ2tHpTMngwzLw7J+2JD8XUcP8llzenmLtTO5IKPZSRrlkKsQq25pO8yJbvZgouyOq5R9SM2uE9jGTcXek3AmmxGwC354/ncIDy+HHVmt+TXifh9XF87k0x/Z3hnJXJMcZj1W7kwuJ3alu6OijKo/p19kGfDKHzpVGgiomr9QSngMfzV4HJLBNqLDR8pLUGAMiaFUEQtCiwRrkRXNsXLBGoaHNBCaLNwjEnQnQjpvHcEWWd8etXh8i6I0pzv+D9+NP/z4bX1wH+lFwe7wtmATRIBklhj8evmBUFOBfb/KA86ISg/lbokvj/hZb2MnJCbucXo2s5gYxiJsYdxtaauUMdpkvEFMcShrGcNvPXHscAMFCxGaKN/7bP6VRwvqjQWbRzIzHemBYiQJO5VeIHnId4Tte8nBvyJ7TUAXRNNGlDFKr0woex7QfGAvChu30psMctzSgNvTUWaybBS22WosP29bBnm7N+BlnnRmPHnTN0XasS8JOJjggICllLkUgdZ23GQegGmfZA5u7RiYJ66DY1JLmEihnjTuxMRNVon9x5NqSFfT12S7TGyRZxJOa9/8YQSMeT6AuM43YVkMs53OcLEPPdJDmbDHskOQwiaUGVK2cPXbK/kmTnfGZW1ab+nBbxSe0k9ct2mPrbXWWw3WELi3XGKUjSmC8S8LfXhtbFbs6+bazb0jAxwHMpNitz9/ZvY3ylzqH37DlKs+K8vsWqBlX2GLStjwtQ2zp7zu2Ks0eZ0KlQakLp6tF4FxCngjhWN/ZCHQGtlEPXYqgh3KOa2h2hD7Annt7X5qRpUNwmGoeZHfDONMHXEOPpuNCNKhTQHBwH8GD0zJCJw9sw3Ar/Alz5vmVvgkDHNg1S2Mz20pPm/ykydTYErs5DaboC7QrHOtKc7UIyLev1wZJ4UuFgGlC3xFCGyaqjEVLni7MPQIdaY27SpcfvQsQp/vas1tfe20hS2uKfg1+JvYv7MxdW6fjb3UI66Hm5Ywl334549ckfOyuyVgkor5HMTpmWZbYisSBActQVZHAM/wG2T/aXVI/UJYw9oEE6EnaHIhspSrFk2QDDyOOfwiQZaAYHJDuVri9E+6qYS3kNQUMHC+VrzftYSVbDnvl0bp8IEe5e4WaYf/UWKfR1RCjlxuzIoNhEXbszYqnN5QT/uxIoRw9vTBBEpuLwRFUFN3N26B7gNECi30mUoVXT7BxSQ0bzz0fvLBS1BudEryIlp9S9mUpaH+gZRyfMb7gOFS2Lui4Hp8a9wjmuknz/UHXDO4CIFR7nlDo4wfsXDeOCLoIWu3tD0gzZDA46G3E3053/akDhFDpyf8KfQNDpqZVknQv/6gmtGcfNk3/rrQEAgXB8cXYiNO5AnJTcNRvTC8NF+Hw4j1ozDuDrxc6Qics+Hh2+fYDC9OjPykNPBbMhz/32HR0eTWdsDQw84vOwf9UkKL1XyJa+fp2k0Owb4ikHqfBDUbpXkPOVKgqKS9EaVsDsVER2nemNfhnbTHzemXUj7rmtDMM5jXeoXuN3uMBcA9uSe95bCdQO6155e2kaZoZmPSgDdTBqZMqOKIOH6wg1WT6gA4/h0axYfcVZH4qn/A5RQqKbV3P5susKGR8ADAcZauVgDZXKb11xbKgRZncy76in1Dp4Zt+d1Ch7j6MpiNmIrc9T2yNtAbdv/ru9JjkzcPGYs7Bb0f+c4MKv5z2/wdhsnuf</source>
  </file>
  <file path="Node/Definitions/HighLevel.php" generated-path="Node.Definitions.HighLevel.html" hash="bf32ec65a963342b2a6a6fecdd0cbf41" package="global">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="10" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>datacenter</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\datacenter</full_name>
      <docblock line="10">
        <description></description>
        <long-description></long-description>
        <tag name="author" line="10" description="Jason Gillman Jr." link="mailto:jgillman@liquidweb.com"/>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="12" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\datacenter::__construct()</full_name>
        <docblock line="12">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="41" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\datacenter</extends>
      <name>popSite</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\popSite</full_name>
      <docblock line="41">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\popSite::__construct()</full_name>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="57" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>section</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\section</full_name>
      <docblock line="57">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="59" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\section::__construct()</full_name>
        <docblock line="59">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="73" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>row</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\row</full_name>
      <docblock line="73">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="75" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\row::__construct()</full_name>
        <docblock line="75">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="89" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>rack</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\rack</full_name>
      <docblock line="89">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="91" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\rack::__construct()</full_name>
        <docblock line="91">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="true" namespace="LiquidWeb\NetMapSvc\Node" line="105" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>genericNetworking</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\genericNetworking</full_name>
      <docblock line="105">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="107" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNetworking::__construct()</full_name>
        <docblock line="107">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="126" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNetworking</extends>
      <name>router</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\router</full_name>
      <docblock line="126">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="128" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\router::__construct()</full_name>
        <docblock line="128">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="143" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNetworking</extends>
      <name>netSwitch</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\netSwitch</full_name>
      <docblock line="143">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="145" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\netSwitch::__construct()</full_name>
        <docblock line="145">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="160" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNetworking</extends>
      <name>firewall</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\firewall</full_name>
      <docblock line="160">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="162" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\firewall::__construct()</full_name>
        <docblock line="162">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="176" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>loadBalancer</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\loadBalancer</full_name>
      <docblock line="176">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="178" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\loadBalancer::__construct()</full_name>
        <docblock line="178">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="190" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>server</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\server</full_name>
      <docblock line="190">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="192" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\server::__construct()</full_name>
        <docblock line="192">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="205" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>virtServer</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\virtServer</full_name>
      <docblock line="205">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="207" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\virtServer::__construct()</full_name>
        <docblock line="207">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="10" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\datacenter</error>
      <error line="41" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\popSite</error>
      <error line="57" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\section</error>
      <error line="73" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\row</error>
      <error line="89" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\rack</error>
      <error line="105" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\genericNetworking</error>
      <error line="126" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\router</error>
      <error line="143" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\netSwitch</error>
      <error line="160" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\firewall</error>
      <error line="176" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\loadBalancer</error>
      <error line="190" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\server</error>
      <error line="205" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\virtServer</error>
      <error line="12" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="12" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="43" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="43" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="59" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="59" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="75" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="75" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="91" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="91" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="107" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="107" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="128" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="128" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="145" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="145" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="162" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="162" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="178" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="178" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="192" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="192" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="207" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="207" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJzlV1tv2jAUfk5+hR8qpVRdeS9dL7t0asW6Cuj20FbIJAfwauzMdsLYtP++44RwqWipCbS7SAQS4XM++/t8Pp8cHMX92Bd0ADqmIZA6+5aw6At0bi7AfKRxMw1vLmQENd/zverOju+RHZJ9HdPE9KUi51RLQT4wzgdUkHO1Rw6+9vKnY55lG0JnL5SDQxtmr6rveyGnWpOIGgQVBhSB7wZEpEkPBCgWWkzf++l7Xpx0OAtJNxGhYYjUbodSaKOS0Gxv2YnvEqoUHZGtWMm4pSgzmrwmF1f1egXDbQrPXlumz/SrQ4GJL3EgKMNAXweYCcCcRJECrYPb68CMYghuMYP9i4leUHOJVoArVhBlGVqNq/e1JfghMyNn2CLIGU0bamCFVY6j5vBOT+rNpYA/WOwMN45xBwtlIoxagc5pnDOjEWjWE9RI5Qw7H/ok5Bbmt9nfTQoHEWbGpJSzqAGc2lLJViYMZUJnSbMy2Q40ZIUU7JJAyWH2Q8O7oJIniqnCvPv7C8pspsAqdnK/fPspajmWcZMZmBTytLbXVMePMIkRKYtA3SvgLF9zuRBz4U/bdoUQl58uiV32GmUg1SppII+WOohIFz3WMsU08hqOCO6a2PJMuQIajUifprg+YoFJlAAxkjDRRw+1w4F0lRzgnzDrtZlg5dQez36Dtv3H1VxzLJiz0lbestWFOR7g2vsnyW4gZ+5Er8PHbJL/aVs3LGkr7OnEHj7oWhpUmt8JMM0hM2HfPnRxAkPKub3nkkZvKKfoR6qEPrSD42hocv+aaANmKNWd9cAXUS1FyBUUm4a59zkDfObOiJMod0DUmFF+kQw64L7S+8Hu8ClunUVH+5kwj3NcxC2CLGnHyaKXlslW3Py2y2fQyghxFGQ+1NGWk6U9JxUC++kQ5vyCxUhOUKk52kzcH+mzLvYtpW19Yk4Pi2Ybryttb6aDxx0Vvt5Zm4sIDo1sO9ZFYQ3BMX2is5GbVzzHWUnx+VC3rid39L9Q8eIEeskqtZ67klE763RanLfOR/n6GJ8955/vMC4YqCM6mbQZ5Wh4OLQDXIqebhs5G8w7b3miTan2pnixsu3U87PXzNu4TdG2qkXkPLZldzYuZcqM51uW7mmq56f8M2InlJNVqbdzL1W4R4f+b8rdHpU=</source>
  </file>
  <file path="Node/Definitions/Generic.php" generated-path="Node.Definitions.Generic.html" hash="f1d0a28e3d8da78537969b6b89c0b861" package="global">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="true" namespace="LiquidWeb\NetMapSvc\Node" line="12" package="global">
      <extends/>
      <name>genericNode</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\genericNode</full_name>
      <docblock line="12">
        <description></description>
        <long-description></long-description>
        <tag name="author" line="12" description="Jason Gillman Jr. &lt;jgillman@liquidweb.com&gt;&#10;This class prepares the base methods and properties for the other high and low level nodes to act as a schema of sorts since neo4j is inherently schemaless."/>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\genericNode</error>
      <error line="77" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="125" code="PPC:ERR-50008">No summary for method setPropOrTrait()</error>
      <error line="154" code="PPC:ERR-50008">No summary for method removePropOrTrait()</error>
      <error line="181" code="PPC:ERR-50008">No summary for method listProperties()</error>
      <error line="206" code="PPC:ERR-50008">No summary for method retrievePropertiesData()</error>
      <error line="224" code="PPC:ERR-50008">No summary for method getId()</error>
      <error line="243" code="PPC:ERR-50008">No summary for method retrieveTraits()</error>
      <error line="255" code="PPC:ERR-50008">No summary for method listAndDescribeNodeTypes()</error>
      <error line="292" code="PPC:ERR-50008">No summary for method retrieveNodeType()</error>
      <error line="304" code="PPC:ERR-50008">No summary for method retrieveNodeClass()</error>
      <error line="316" code="PPC:ERR-50008">No summary for method retrieveValidRelations()</error>
      <error line="327" code="PPC:ERR-50008">No summary for method setNeo4jObj()</error>
      <error line="344" code="PPC:ERR-50008">No summary for method getNeo4jObj()</error>
      <error line="362" code="PPC:ERR-50008">No summary for method toArray()</error>
      <error line="383" code="PPC:ERR-50008">No summary for method validateProperty()</error>
      <error line="456" code="PPC:ERR-50008">No summary for method validateNode()</error>
    </parse_markers>
    <source>eJztW91z2zYSf5b/CiTjOUodxZ707ilq3Hpit+dO4mQc9/pgZ1yIhCQkFKkSpBXNNf/77S4+CFAURfvaXh8uk8gyCSx2F/vxwy7yzberxeog40uhVjwW7LX8tZLJz2J6eynKN3z1/j6+vcwTMTmolGC3La8nB4ODwfFXXx0M2FeMPr7jVbnIC/YjV3nGfpBpuuQZ+7E4Yt98nOvfvkuJ0FpMj+J8eVLPvV5IxeKUK8VWhVjxQihWLgSbclh+KYBuohjPEnibr0RRSng/g7VwTA4fBVvI+YJGpPmapeJepCwDAYBMznhcMg7zmYoXYslZPmMqL0rFlMxA+Ezk//jIgAGZASWRlenGjEyFUkfIIP47PhjwqSoLpKZZnYtMFDJGRR0M/n0w0PrQQpFG7nnBeFHwDTtEZt7VzL/Ks5LLTEvpCVUuOPBKrLMY1Lfg92JMg8rNSqAwU8FgT5IxCUvyr0qZZzyV5QYl8whufGau6blc8mLDPgka2mRKanbQLNop0Tb5RNawryzWsgBDRlgSQmaJjHlpNpK4v4nwR/RhHPB8ExUCrKIQCb6xUiW85EyWSqQzGIG/RR98cU4zJj7z5So1rErHfoT8R47zF3r8IQ55dhJKfKPHfrCMsZcsgh2W2Tya9JpWcw5Tr69+Ou83TYsDUw7x28STC4xsAJyXIi5FsrVBL7WCh6PJgWdt7cZ2XXBQH247uBA4FItmhRDoNctI21fT7NZ5lSbWvtDUwBPBEcEhYP5UguXDrpeaLE1YwlowHFxBzjOReMxcZLQVuJgzNM2QVQIKf8/TSkzqaS3CGynaBffdTG+bmYTGFnjYvSimuaKfCgzPWjepAbe+eweQ3i6N59OPMBLGYRB5O/3ILjzS5uUagk9cCI4EZ0W+1BEHvKCgV8BkybNS0nvwI/OWfFsTmOewRxibduvKLL/HMEDjMrkSKUf3U9qf9Su1ErGcSeOuNI49zatymldZ8hRMQc8ZqlGoOR0CVLVaQUR13qvn43ucADKWvJgL2EhQPGcQ30sZVynwZemqhVx5PL8viyouq8LFIWIydOVQFvRF/fUOl31OFqaNJuIpJAWR3FHUfh6NWfjk62g06U/5652U/27paGLnJjxhnvrlXhblxQxS7S86d3SLAhE1g41V/lKOwj5u0cL8iavFRumJIHgBWyoK/KZEcW++rWUZL/DbDGLZGmQKBGlYWsOEfM+EgS3eCbvNl7V/YnK5bmSZjDIojS4XRb5WoLxYUI5gP6N90VNMMMI9l5DERVkiUe6CPboURSg24zJVzfwHelVkWTBMowranSCP7wgEsyqLad27O0dlSNKMrXMhEy5eXf70+vUIKCAsGDwm+eyb1Jp69k2qEw8+oRkdswA+xYUkdT+YzcbcgNvvT1+/P9+3uPgMhgoQ4eLswWuHUx++NGDTJWQ99eCF/Ylty3ZNxahw+RiDCGa2WAVOPT5m70WpY7sbX3sN5Hp8oxYYw02OpBUzdSXm4jPQYtFxxI4Qnc/vfq3AK4Z3d5enb87fvzt9dX53N4J30S38Oe7PqzNGIqpWgAaHdsUxOGV5F0MsstF1OBrdPP+gxZGz4ROp7rIqTYee241GDAS9qjKDB2dsLZCOBS3g6h7mqVYYRVzuNSKTvw4gKggeL3zimMUOncZenhj4MqLxetagLDb6i/ndqgECFWrhbUGkho7M2BKZ6PFf9A+AzbD2bR0DD80yjq6Oh5lYs3rUMDovChDRRsWtmPiC4Q4eimcnoJM3cLThcwFaDdamT/z40ieYuyWuvaNCHYM3eQUAB+Aj2BdwFZBYys8mm1Q6H+hvjWPHPlqFAJBgjx1IRdnd9jZ748OSameiudYPmklm22UguGzwsMHLUixXpcbKgIPjBc/mBgYbfTmn09JhsuEB+K4lPNKZLgf3WxeyBMiTbYATqWgzab46YlcksKbZQ9ajZj6rpqmM62S21zBtBgOPkwpGD9sd2038oH3wXQUHQDwDEivNY4zeLtCtLCM8lidiJuH84B82jaXDsrWRPYF4WAeQwPH2ceVnPnfqwHmqimPwBAdj2jx8UnvGQKRKBB7f6ojX7WEWD/RZXnq2EvnE6QMXQA1eaNXQ/tb68OQ0x6laxoZs/UWjdY0n2VmTPyAEFGIJ1n1cZc5/9ecVPTc2bY4hSYuD7LFlTb7VnB9rxj8LSKhgngB5QVaAyQsPawZW6ms3NFP29oo13hIa0yucATwqDete8aXYNh/gb7/hvTIWZgi6GoiO/E4dXRZN27NXP9ahdtrvdWi4W1S3zLe2xS9tZ3xtddM8TwXIeGhxDh63EeaMEbysWZ6lG+be1Zob6yrhWiqhBwKwCBW7lU38SJtCFMbU5BOE57IIClkYealshfBNhRauafEWSozfw1GFT1M/PbSQd6UxeOxW2eMSuFq9fcNaawaROr9weKdt27uQTx2mHe3TyzMzwoejYbi21F4Dg4FVBfh1mwr7lkW43REDkyYRosk+kg5MW3L6QdMHEFM6If7K3Abh2qfTEbP3WjZiCc8mKdRR3UWpPNaVKTS63kZN9UEsXmtbRfI8zW0QtQXevREdkoy490zxDCYNf0erNcnAqNqENArMbzGSrKogTJjqfCEMAt1rId42atr9t/Fgq4xnxkpIpv4OXpxZ0AxnGVdG7KqodABdgqYAbTGH+GXJmo+2fYLjxEUy9JMsns642xdTmxzDCfEc4O1mybPbS3xIPSbIhPWe7Etr2iA0nxdnL9hlg1GEnEQ68rCNTXF6CavzkDk6FKEU3WmolyPp42a3r9TjvLiuUX5Pr9AZtFZ7Qy6XY/fYUygKr7s4uoIzReRjTUN586l2bIpoVAO29Lrmj2F/4rRKzEMU2VTmqZZM4Gf4mk9F6grho3GQdlFZurrsSsehcYItlM0ceJolZ5obcWnq+Z7i/osqh+0OoN/aQsa8EKtGHSMRAOcKW8nAtUeuLnOeyqXMOB74bHfRFddVEOWCxTC6yeQzBTZ88Qope450SEtdCwWnVeCMPOpKzFJBWqHRQ2/ixOVxb96zE6lODVPDUZATDZ7zWbpBfgJAaEd5JD2v9EhYHrrFbRUTj+C4p0bGetAwsq/sIctRVDetFSdvgZvnHyAXG9u8dinZUnx2Yp3QmtPwsWvUtt1cogHeHruAc5NdIvwrKOjbdSxgN8P375sNP46/PXHHHCD9GGpjQd1c0n1JjC6mLbkjABWGSt3+qzvlBKup/dbo/HUnte0d7gi01CB8qLj6EgHGvD1ShYOtCLo32F8I7RUdUuwp1G4JuDcn6ifAblvAbmTGzq6jLRkNEbMsV3jWsiUkPNbp/nam61nmFOX1GGMbM/pk1aY3tKsrbILt2np9Zt3qEFP3i+6cmFc9umAdmO3SJ5XkQmFFYYklZA1M8pin9jXqZr2Q8AoLM6g13bwH0+w2JFDspeF/2AbiavF8GHgYoCtjX5thUB55+dIqtcVYCYq/4Z8AcWMzmOqFKFQh54vSnoAbtTGr5pd+V7wdCnajTYJoTQVjv75EiGw2bV3gqYaClb2Q5Gs82oEnQ9fRY3/DfkandZimp1/NwDndW/e3ubd3we40FPak7lp2QuVQm1TswaC14PGnDZvJz3UBBoIwJKl7vEHy9N0/3yFal7F4wfTp6p4XkuoehZjhvasYTlhqYS+h6LWByHRTD3jqbTdpS7M8CbjFF320rmPIaX3NZStDIAjVo/AmS7eay/xUN8IdrNTL+Bde+jRnJ8HcuhzwoDjtLY6bRoi6ScYmrXpsjUX0yaG+RXC3FMVcDBuO2jyXj5uebI8oNdr9HnwkkQBa+Ga8VfakgxB5El6SCW/GechjN7tWl9rpegz31NeAMfpnd2TfUfyG0IplY8oRvLSh1ZmdqWH+ZtzbJkAsFNmQ7kit6LjgSOXZ2IECCFJ1ejC0qKVCOQADmMfwq4WIP9FdSJFRJCVgFSylO1R0vw+fuGhGG2I7NPhQljt9wPApXKRvrcA/6VeCD+sxWk26bLmlJlOxMFWZIHa1tWbaGjKW9aSO8IZka/GcjGKgb870kES7sRdZY7zYarv7L/SZytRN9MMHqEfPtq3hPnLfRoFIdKqNrMgahQVa4Ba+DslKjEb69tyA+ihqtLingMc/aY8zuogXvPA0AQumIuuvBcxez/8cVYAiUurg4bkYPOUPVIrMSjjWFQ0Lgad/LfOgqiQy+kfqghLRRVY2lGGam38tdZjjCrq91gVgMLoN2d+e25TSWfBu0yyWTfBrQ2rfjui1ee8GdOlFyyZSgVedrHKoyv8QOwFktaM7GUpuRe82i/dtgfT/lvFoy7A56M80DpdjfgfTALzCq7Q09tBnKwnmGH57pnMjkoVbut3FLZLIiyP2DoAe2Ki++83yTBwB84hmTvV6bijMVQaJiCxAW2uqgMFbgoLY3wikHYSNJHsPtOPUY1vobbhT30xqYs7OmgSVIfhWz72ByR4xP5EJFjKQmyYvXZiWUydi6wKA7dqZZosBv2SY7vZRq9xdMBcLFfV5D7aVWHoIR+bgebDtwY3qL+4SXaTHFjU+p8K/c2DX0OzG1mZuM+Z1Xim5yLSzorBHdFrevdPGXc0y4d0QoyK8nck9JTM+x/+lUTY60C0a+d+1d+taSccBx7QhY5HPPP31urfZUDFmSf3AyUf3AFUAqzpY6XXBcztkwN9vTw7+A6sKhgI=</source>
  </file>
  <file path="Node/Definitions/LowLevel.php" generated-path="Node.Definitions.LowLevel.html" hash="9fc017056402c51b7f26db70e8d7fd16" package="global">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="10" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>physIface</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\physIface</full_name>
      <docblock line="10">
        <description></description>
        <long-description></long-description>
        <tag name="author" line="10" description="Jason Gillman Jr." link="mailto:jgillman@liquidweb.com"/>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="12" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\physIface::__construct()</full_name>
        <docblock line="12">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="35" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>virtIface</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\virtIface</full_name>
      <docblock line="35">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="37" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\virtIface::__construct()</full_name>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="67" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>ipNet</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\ipNet</full_name>
      <docblock line="67">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="69" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\ipNet::__construct()</full_name>
        <docblock line="69">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="88" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>lbCluster</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\lbCluster</full_name>
      <docblock line="88">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="90" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\lbCluster::__construct()</full_name>
        <docblock line="90">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="99" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>trfIpGrp</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\trfIpGrp</full_name>
      <docblock line="99">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="101" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\trfIpGrp::__construct()</full_name>
        <docblock line="101">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="118" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>nodePool</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\nodePool</full_name>
      <docblock line="118">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="120" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\nodePool::__construct()</full_name>
        <docblock line="120">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Node" line="137" package="global">
      <extends>\LiquidWeb\NetMapSvc\Node\genericNode</extends>
      <name>lbService</name>
      <full_name>\LiquidWeb\NetMapSvc\Node\lbService</full_name>
      <docblock line="137">
        <description></description>
        <long-description></long-description>
      </docblock>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="27" package="global">
        <name>$nodeProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeProperties</full_name>
        <default>array()</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Contains the properties that a node can have, the type to be used, and the optionality of the property&#10;The primary key of $nodeProperties is the name of the property&#10;This primary key will contain an array that indicates the type ['type'], optionality ['required'], and the data itself ['data']&#10;An example of this is the 'name' property:&#10;$this-&gt;nodeProperties['name']['type'] = 'string';&#10;$this-&gt;nodeProperties['name']['required'] = TRUE;&#10;$this-&gt;nodeProperties['name']['data'] = $data;&lt;/p&gt;" type="array" variable="$nodeProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="36" package="global">
        <name>$nodeTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeTraits</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;These are 'free form' node properties that would be used to represent arbitrary traits that may be assigned&#10;In the form of $nodeTraits['name'] = $value;&lt;/p&gt;" type="array" variable="$nodeTraits">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="43" package="global">
        <name>$nodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::nodeType</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;Contains the verbose version of the node type&lt;/p&gt;" type="string" variable="$nodeType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="50" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::neo4jObj</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;If the node object was created from neo4j, or was instantiated in neo4j, the object goes here&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="65" package="global">
        <name>$validRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validRelations</full_name>
        <default>array()</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="65" description="&lt;p&gt;This array specifies the valid &quot;outbound&quot; relation(s) the node type will support and the valid type(s) as targets of a particular relationship&#10;Structure of the array:&#10;$this-&gt;validRelations['relation_type1'] = array('allowed_class1', 'allowed_class2');&#10;$this-&gt;validRelations['relation_type2'] = array('allowed_class3');&#10;Example for &lt;code&gt;virtIface&lt;/code&gt; class:&#10;$this-&gt;validRelations['connects'] = array('virtIface');&#10;$this-&gt;validRelations['from'] = array('physIface', 'router', 'server', 'switch', 'firewall');&lt;/p&gt;" type="array" variable="$validRelations">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="139" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\lbService::__construct()</full_name>
        <docblock line="139">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="LiquidWeb\NetMapSvc\Node" line="77" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::__construct()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The name of the node&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="throws" line="77" description="Will throw an exception if setting a property or trait fails&#10;The constructor method for genericNode" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$propTraits</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="125" package="global">
        <name>setPropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setPropOrTrait()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The property or trait you want to set&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="125" description="&lt;p&gt;The value of the property or trait you want to set&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="The set trait or property and the value" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="125" description="Throws an exception if the className proptery is attempted to be changed&#10;Sets the value for a node property or trait. Will overwrite any existing values. Returns the set trait or property and the value." type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="154" package="global">
        <name>removePropOrTrait</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::removePropOrTrait()</full_name>
        <docblock line="154">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="154" description="&lt;p&gt;The property or trait you want to remove/unset&#10;Removes the specified property or trait.&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="181" package="global">
        <name>listProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listProperties()</full_name>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="181" description="&lt;p&gt;If TRUE, show only required properties, otherwise show all properties&lt;/p&gt;" type="boolean" variable="$required">
            <type>boolean</type>
          </tag>
          <tag name="return" line="181" description="Returns the list of properties, their optionality and data types&#10;Returns a list of properties available for a node, their optionality, and their data type" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$required</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="206" package="global">
        <name>retrievePropertiesData</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrievePropertiesData()</full_name>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="206" description="Returns the list of set properties with the associated data&#10;Returns a list of properties that have data set along with the data" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="224" package="global">
        <name>getId</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getId()</full_name>
        <docblock line="224">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="224" description="Returns the ID of the insantiated node" type="int">
            <type>int</type>
          </tag>
          <tag name="throws" line="224" description="Throws an exception if the node is not instantiated" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="243" package="global">
        <name>retrieveTraits</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveTraits()</full_name>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="243" description="Returns the list of set traits&#10;Returns a list of set traits and their values" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="255" package="global">
        <name>listAndDescribeNodeTypes</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::listAndDescribeNodeTypes()</full_name>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="255" description="Returns a an array describing the nodes&#10;This method will return an array describing the nodes, including their verbose type name (Label in neo4j), properties, and valid relations" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="292" package="global">
        <name>retrieveNodeType</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeType()</full_name>
        <docblock line="292">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="292" description="Returns the verbose node type that will be used&#10;This method returns $nodeType to be used for creation of the node" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="304" package="global">
        <name>retrieveNodeClass</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveNodeClass()</full_name>
        <docblock line="304">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="304" description="Returns the class name&#10;This method returns the class name of the object" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="316" package="global">
        <name>retrieveValidRelations</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::retrieveValidRelations()</full_name>
        <docblock line="316">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="316" description="Returns the array of valid relations&#10;Returns the valid &quot;outbound&quot; relations array (an empty array if there are non set for a particular class)" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="327" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::setNeo4jObj()</full_name>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="327" description="&lt;p&gt;The neo4j object of the node&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="throws" line="327" description="Throws an exception if the Neo4j object doesn't match the local object for which you are assigning" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="344" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::getNeo4jObj()</full_name>
        <docblock line="344">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="344" description="The neo4j object of the node if set, otherwise null" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="362" package="global">
        <name>toArray</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::toArray()</full_name>
        <docblock line="362">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="362" description="A representation of the node in array form" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="383" package="global">
        <name>validateProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateProperty()</full_name>
        <docblock line="383">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;The property you're validating&lt;/p&gt;" type="" variable="$property"/>
          <tag name="return" line="383" description="Returns TRUE if the property passes validation, returns an Exception object if it does not&#10;Checks to ensure that the property value is proper for the type defined for it" type="boolean|object">
            <type>boolean</type>
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Node" line="456" package="global">
        <name>validateNode</name>
        <full_name>\LiquidWeb\NetMapSvc\Node\genericNode::validateNode()</full_name>
        <docblock line="456">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="456" description="Returns TRUE if the node passes validation" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property is not set" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
          <tag name="throws" line="456" description="Thrown if a required property didn't pass validation&#10;Checks to ensure that all required properties are set and that the data defined passes validation" type="\LiquidWeb\NetMapSvc\Node\Exception">
            <type>\LiquidWeb\NetMapSvc\Node\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="10" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\physIface</error>
      <error line="35" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\virtIface</error>
      <error line="67" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\ipNet</error>
      <error line="88" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\lbCluster</error>
      <error line="99" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\trfIpGrp</error>
      <error line="118" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\nodePool</error>
      <error line="137" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Node\lbService</error>
      <error line="12" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="12" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="37" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="37" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="69" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="69" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="90" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="90" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="101" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="101" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="120" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="120" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="139" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="139" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJzdll1P2zAUhq+TX+GLSqGIwc3UC2B8bNpQUVdVlG4XMCHXcVoP1/ZsJwWh/fcdB9KlLA1JOq1oUr9S+T2P7fOeYx8eq6nyBZ5RozChqMd+xCz8SsfXfWo/YzVMyHVfhvTA93xvb3vb99A2Sj9OcGynUqNzbKRAZ4zzGRboXO+iw++Tx6cTnkab0/EukbMjJ3PvPd/3CMfGIDW9N93IcemdpSI0aEIF1Yw4pO89+J6n4jFnBEWxIJYB6OaGSGGsjondarl57yCsNb5HLaWlutSYWYPeof6o12uD/AFYnteyU2beHAmIOoBRVFtGzVXAHPryXtHg21Vg02+QBhCdiUlwUFWpKaxS0zBVX16MPqbKErVR1I3OM5mwdEJ1KXQhawYcCWaXoWSKKxAzXW3qzMb1F/kkWoJ9Ou0NC2kuAy7wAHzECOaoCwTtcgOM3NgEcxZeUI6dhQACFhKUWJNGT+2zFSy8GLQftQprKuz+foHjcl5ru3n99N0rc3XCtN2gqx2+kanzwuJkl2WbCWpPw1BTY+qX07J2RfJfokPHmmFz24ie01az3vMAncK1p0kcVptC5+UdKKsbeK698kxUH5dwLOoXd6aqmOCsvL+AMeP1qntRk0H7oEQaaTkrbgo7KNAyBr77BdkazpklU/cQwUrmmHP321CdwJB1OwhT4MfNdI81qrikiKscFyAfaBqxu2dguGTYl7i/hU2wjbplTleb6ZwE8eEvK4nktdkF+oI5rKim7gCBu+ZS3wZ/Oo+PP/DYgM3/nfuyefUkDtF7DC2CAP5pGsGalWR11FVnWm3ogqmStz1mbMNDIaducCippLMWu1PGXpFD2J4ogt0Ej52BSVV5ox5TLsXE3FiZ77kcfJDZwPXUhSXXbqvpIqXk/6kZXp0b3L4it+GvywZ8PIRjmm3qfq7ceVb76pSpqvf55X76tOS/nonVwWJDl65gWfU1zd/xkf8LYbZfMA==</source>
  </file>
  <file path="Paths/Paths.php" generated-path="Paths.Paths.html" hash="06adbace33d0f4b6ea331c3de201d8de" package="global">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
    </docblock>
    <function namespace="LiquidWeb\NetMapSvc\Paths" line="23" package="global">
      <name>findPaths</name>
      <full_name>\LiquidWeb\NetMapSvc\Paths\findPaths()</full_name>
      <docblock line="23">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="23" description="&lt;p&gt;The node ID to start at&lt;/p&gt;" type="integer" variable="$startId">
          <type>integer</type>
        </tag>
        <tag name="param" line="23" description="&lt;p&gt;The node ID to stop at&lt;/p&gt;" type="integer" variable="$endId">
          <type>integer</type>
        </tag>
        <tag name="param" line="23" description="&lt;p&gt;The maximum number of relations to search for a path&lt;/p&gt;" type="integer" variable="$depth">
          <type>integer</type>
        </tag>
        <tag name="param" line="23" description="&lt;p&gt;The path algorithm to use. Available values are: allSimplePaths, allPaths, shortestPath, dijkstra&lt;/p&gt;" type="string" variable="$pathAlgo">
          <type>string</type>
        </tag>
        <tag name="return" line="23" description="Returns an array of paths, which themselves are an array of relation objects of the NetMapSvc\Relation type" type="array">
          <type>array</type>
        </tag>
        <tag name="throws" line="23" description="Throws an exception if, well, there's an exception" type="\LiquidWeb\NetMapSvc\Paths\Exception">
          <type>\LiquidWeb\NetMapSvc\Paths\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$startId</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$endId</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$depth</name>
        <default>15</default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$pathAlgo</name>
        <default>'allSimplePaths'</default>
        <type>string</type>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="23" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Paths\findPaths()</error>
    </parse_markers>
    <source>eJx9U1tr2zAUfrZ/xXkI2Alewh720rRpC81GSjtKW9hLIMj2ia1UljxJjhtG//uO5LhJINuDhM7t+85Nl9d1WYeSVWhqliE88N8Nz39huvyJ9pHVL9ts+cRsaaZhYxCWZ+zTUCMpNcY51w4pXq2+Lx7mq9UQxhBN7nDNJbdcyTFxRcNpGAaT0SgMYAT+umGNLZWGe2aUhB9ciIpJuNdjuNwUnXQjPG+L6ThT1ewQ+6TVludoYN3IzHEYsAoKtFC7rCFF2yJKsK0CqcjRRbkzOWTRJVEzzSrg0mKBGgbGMm0XObyW6ANhceeQvRqYPRuDMj8Xoep/BeRY29IHVOydV00FsqlSsqg1aBTssyCDTGclrKlLzFd2DGes5rKAgdPfikJ5QCcAI0lzW1YOg+Y3htst44KlAmHLREN9YxovyE+88KoW6EedOHn/MjQYi8Y6MYGcb96IjXXsGm2jJSFotoNnLxBer6AS6g6jLTnlbkusDIptx3ni15cKKt1gZo3TkTscVvC597C7Gjt2W2rVGpi/Z9REZ3rtFASMnzq+JnoUInF4GqNTc7cHQb86QHua+7rjfvzJfqhJP6sr+PotOWr1FUSnzYuGYfAnDAKrd3S7VzBolX6jCXk7RUhs4f80Rwz0XYLgg07GbFbGy0O9Axz2DL4XHvdgj6O51rQvNCXNces2xM/jAiL6lgP8MqNf8ojGsALj4Z6Grv1UT5L2vl3KzvEjvJ6FfwEDwmIH</source>
  </file>
  <file path="Paths/Definition.php" generated-path="Paths.Definition.html" hash="357aa42bdd114144b2f393d981e1618d" package="global">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Paths" line="12" package="global">
      <extends/>
      <name>Paths</name>
      <full_name>\LiquidWeb\NetMapSvc\Paths\Paths</full_name>
      <docblock line="12">
        <description></description>
        <long-description></long-description>
        <tag name="author" line="12" description="Jason Gillman Jr. &lt;jgillman@liquidweb.com&gt;&#10;This class defines a Paths object"/>
      </docblock>
      <property static="false" visibility="private" namespace="LiquidWeb\NetMapSvc\Paths" line="19" package="global">
        <name>$pathAlgo</name>
        <full_name>\LiquidWeb\NetMapSvc\Paths\Paths::pathAlgo</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;The algorithm used to get the path(s)&lt;/p&gt;" type="string" variable="$pathAlgo">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="LiquidWeb\NetMapSvc\Paths" line="28" package="global">
        <name>$paths</name>
        <full_name>\LiquidWeb\NetMapSvc\Paths\Paths::paths</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;An array of the returned paths&#10;A path is essentially an array of locally instantiated relation objects on the order that they appear (\LiquidWeb\NetMapSvc\Relation\Relationship)&lt;/p&gt;" type="array" variable="$paths">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Paths" line="39" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Paths\Paths::__construct()</full_name>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="39" description="&lt;p&gt;The neo4j ID of the starting node&lt;/p&gt;" type="integer" variable="$startId">
            <type>integer</type>
          </tag>
          <tag name="param" line="39" description="&lt;p&gt;The neo4j ID of the end node&lt;/p&gt;" type="integer" variable="$endId">
            <type>integer</type>
          </tag>
          <tag name="param" line="39" description="&lt;p&gt;The maximum depth to look for a path&lt;/p&gt;" type="integer" variable="$depth">
            <type>integer</type>
          </tag>
          <tag name="param" line="39" description="&lt;p&gt;the path algorithm to use (allSimplePaths, allPaths, shortestPath, dijkstra)&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
          <tag name="throws" line="39" description="Throws an exception if there was an issue creating the Paths object" type="\LiquidWeb\NetMapSvc\Paths\Exception">
            <type>\LiquidWeb\NetMapSvc\Paths\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$startId</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$endId</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$depth</name>
          <default>15</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pathAlgo</name>
          <default>'allSimplePaths'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Paths" line="75" package="global">
        <name>getPaths</name>
        <full_name>\LiquidWeb\NetMapSvc\Paths\Paths::getPaths()</full_name>
        <docblock line="75">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="75" description="Returns an array of the paths found" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Paths\Paths</error>
      <error line="39" code="PPC:ERR-50015">Argument $pathAlgo is missing from the Docblock of __construct()</error>
      <error line="39" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="75" code="PPC:ERR-50008">No summary for method getPaths()</error>
    </parse_markers>
    <source>eJyFVd9P20AMfk7+Cj9UaoJK2aTtZaUdSKCJaXQTIO2BInRNrs2VJJfdXWjRxP8+ny8/tYxJEO7ss/3Z/mxOPxdJ4ecs47pgEYdv4lcp4p98vVpyc82K2+do9YOZRM/8UnNYDehnvu+dHB35HtAvnLHSJFLBV6ZlDl9EmmYsh69qCqe7rbudpeRmz9fTSGaLxvQuERqilGkNMd+InGtgQOFBrnc8MvXLE99zz0jpe799z2EgPaF4Zgq0USLfwqjAV+fpVmIADgwPSpgkA8woBiNhyw0Y1NhngQ5bLxjGK5R4Zoa3Tmy+Q8GYUuzFPdNwnld3uSHXiptS5RiucICtlfuekwgwca41z41gafoCrGOfyohkIteG2QcG/SieMiOwwK4wWKCcAkkVc4UnRimho6LgCC4Y6tzqpnLSHHQiirfy10PJF0yxDNEZvsXQIwSpzFVMtc65/LCDq4u6DKSzLcllzIfNeR7/wxg1b9jFvMAyWruMHURWZuAk2N9UyifYICUZ1bpnX1Gkbn+HHWhoKR9g7W9FVqScuDbBF2l10khzw7Wx1wnEYveE3lhY+TeJknsNl4cIcdhO3TkBtpY3MkGpKQ57RhqhdckhUpyZGlaf/73WlOtURLAp84icPT5G2EKjysgEdRsmVUUndYXm8P7jpDMScxj3MxzbBOxAeUa92D909kYGh/N40bHrTwS+oJBL7BAqW5JZwWqjZLa0/WyAhccLnDuSfV/vgnDmfCDY/3qghP62dw6INa5mc2ghHS9wn8Qkv5NBHQadaG7O654HTUpOcc0OF7ZogaudC0k+mnhiE0SyzLHgbeAQ5nN4F5LeFc8jMiCj97BqCBGMl9LtA9hbCmzQTww2T6I5jGHaTtMUr8jIVuHmBMVTuMUJj5KK77hISO8Qu6q+Oqw4ApxFSRcqIO1GIj7AfAGtuAe9FeOWoKI2AqpHd3fouo8DscjahutKXKQ6VJdk+t7ierh/6FGh2VgdOnT9EaKrOAhrHK9+86VPxAyiapuAhQxbkg+36VIpXB7NbNnBLDpD+alqCMW+xi3OtrwGYGO+DuxM9/+g2vE3dNG9pV8vJO1o8fbgt6ysR7fy363njKDgzx8V92/+</source>
  </file>
  <file path="Relation/Relation.php" generated-path="Relation.Relation.html" hash="271cbd6a1593c008df15d939fe1f31c5" package="global">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
    </docblock>
    <function namespace="LiquidWeb\NetMapSvc\Relation" line="24" package="global">
      <name>makeNew</name>
      <full_name>\LiquidWeb\NetMapSvc\Relation\makeNew()</full_name>
      <docblock line="24">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="24" description="&lt;p&gt;The neo4j ID of the starting node&lt;/p&gt;" type="integer" variable="$startId">
          <type>integer</type>
        </tag>
        <tag name="param" line="24" description="&lt;p&gt;The neo4j ID of the end node&lt;/p&gt;" type="integer" variable="$endId">
          <type>integer</type>
        </tag>
        <tag name="param" line="24" description="&lt;p&gt;The relation type&lt;/p&gt;" type="string" variable="$relationType">
          <type>string</type>
        </tag>
        <tag name="param" line="24" description="&lt;p&gt;Properties of the relation (if any)&lt;/p&gt;" type="array" variable="$relationProperties">
          <type>array</type>
        </tag>
        <tag name="return" line="24" description="Returns a relation object" type="object">
          <type>object</type>
        </tag>
        <tag name="throws" line="24" description="Throws an exception if the relation creation fails" type="\LiquidWeb\NetMapSvc\Relation\Exception">
          <type>\LiquidWeb\NetMapSvc\Relation\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$startId</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$endId</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$relationType</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$relationProperties</name>
        <default>NULL</default>
        <type>array</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Relation" line="44" package="global">
      <name>setProperty</name>
      <full_name>\LiquidWeb\NetMapSvc\Relation\setProperty()</full_name>
      <docblock line="44">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="44" description="&lt;p&gt;The relation object to have the property set on&lt;/p&gt;" type="object" variable="$relationObj">
          <type>object</type>
        </tag>
        <tag name="param" line="44" description="&lt;p&gt;The name of the property&lt;/p&gt;" type="string" variable="$property">
          <type>string</type>
        </tag>
        <tag name="param" line="44" description="&lt;p&gt;The property value&lt;/p&gt;" type="mixed" variable="$value">
          <type>mixed</type>
        </tag>
        <tag name="return" line="44" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="true">
        <name>$relationObj</name>
        <default></default>
        <type>object</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$property</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$value</name>
        <default></default>
        <type>mixed</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Relation" line="56" package="global">
      <name>removeProperty</name>
      <full_name>\LiquidWeb\NetMapSvc\Relation\removeProperty()</full_name>
      <docblock line="56">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="56" description="&lt;p&gt;The relation object to have the property removed from&lt;/p&gt;" type="object" variable="$relationObj">
          <type>object</type>
        </tag>
        <tag name="param" line="56" description="&lt;p&gt;The property to remove&lt;/p&gt;" type="string" variable="$property">
          <type>string</type>
        </tag>
        <tag name="return" line="56" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="true">
        <name>$relationObj</name>
        <default></default>
        <type>object</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$property</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Relation" line="68" package="global">
      <name>instantiateUpdate</name>
      <full_name>\LiquidWeb\NetMapSvc\Relation\instantiateUpdate()</full_name>
      <docblock line="68">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="68" description="&lt;p&gt;Loads the relation to be created by reference and creates it in neo4j. Loaded by reference so that the object can have its $neo4jId property set&lt;/p&gt;" type="object" variable="$relationObj">
          <type>object</type>
        </tag>
        <tag name="return" line="68" description="" type="void">
          <type>void</type>
        </tag>
        <tag name="throws" line="68" description="Throws an exception if something goes sideways" type="\LiquidWeb\NetMapSvc\Relation\Exception">
          <type>\LiquidWeb\NetMapSvc\Relation\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="true">
        <name>$relationObj</name>
        <default></default>
        <type>object</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Relation" line="122" package="global">
      <name>fromNeo4j</name>
      <full_name>\LiquidWeb\NetMapSvc\Relation\fromNeo4j()</full_name>
      <docblock line="122">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="122" description="&lt;p&gt;The ID of the neo4j relation you want to import&lt;/p&gt;" type="int" variable="$id">
          <type>int</type>
        </tag>
        <tag name="return" line="122" description="Returns a local object based on the neo4j relation imported" type="object">
          <type>object</type>
        </tag>
        <tag name="throws" line="122" description="Throws an exception if we have issues" type="\LiquidWeb\NetMapSvc\Relation\Exception">
          <type>\LiquidWeb\NetMapSvc\Relation\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$id</name>
        <default></default>
        <type>int</type>
      </argument>
    </function>
    <function namespace="LiquidWeb\NetMapSvc\Relation" line="155" package="global">
      <name>delete</name>
      <full_name>\LiquidWeb\NetMapSvc\Relation\delete()</full_name>
      <docblock line="155">
        <description></description>
        <long-description></long-description>
        <tag name="param" line="155" description="&lt;p&gt;The ID of the neo4j relation to delete&lt;/p&gt;" type="integer" variable="$id">
          <type>integer</type>
        </tag>
        <tag name="return" line="155" description="The status of the operation: TRUE if success, FALSE if the relation doesn't exist" type="string">
          <type>string</type>
        </tag>
        <tag name="throws" line="155" description="" type="\LiquidWeb\NetMapSvc\Relation\Exception">
          <type>\LiquidWeb\NetMapSvc\Relation\Exception</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$id</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="24" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Relation\makeNew()</error>
      <error line="44" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Relation\setProperty()</error>
      <error line="56" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Relation\removeProperty()</error>
      <error line="68" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Relation\instantiateUpdate()</error>
      <error line="122" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Relation\fromNeo4j()</error>
      <error line="155" code="PPC:ERR-50011">No summary for function \LiquidWeb\NetMapSvc\Relation\delete()</error>
    </parse_markers>
    <source>eJy1WEtvGzcQPku/YgoI1SqQ7R56qmMlaaMUDlQnsB30UBcGtTuSaK+WW5IrWSj83zt87FOU7RjoQYKWy3nwm28e1Nt3+SrvZ2yNKmcxwoz/U/DkT5zfXKD+g+VXm/jmElOmuchO+4VCuAlsOe1LpEWJUcKlURbd3n46n01vb0dwDMOTj7jgGTc6jsnccHTa7/dO3rzp9+AN2K/3rNArIeEzUyKD33marlkGn+UxvL1buqf3qbW7xflxLNaTWvarFBueoIJFkcXGhgItgGdKs0xzphGkPwCI+R3GWhkx8zmp3XBe5EyyNYlqXKKEAWmQ+jyB6xVChuLnOzj/CGIBmp7tO54tIRMJBqUxSw7I0ps9MaWl0TYofb3e5WiFK+c1rTQlmJRsVwsQDDmSSwRE46e3WCmJ+AJYths5RRJ1IUtY4NI+KWBdwNxmvZJiq2D6EGNuX167BQoUVmu8Yy+W6H4sGE8bwPfKYMGa3eMFbqMS7bFHbtzGYvzEec/g4ttsRmf6t9/rabmjb/Or54+X4RZKDj9vJmCA+NrrPdInZjpeRTc1BAMclcYsPNZW/T4a/iaK1ARbOyTQbigt/AJDSo8BHk2WlEmoFFtiNCqtPYbZ6YNVufllftfmid9AObBiG7ThyN1RdqBQg8hCvKu2WMJSCpfUKV80hdb8ARMYbFhaOJJW0napRa6N4Eko7uSKR3gXldGBH5vHGtdejb0xH+PmrqNJU9O+xOn/g6TEtdgQCAsp1s/iWT2QKif4Iojc1pejFESno6Te/H3AzARLVDu36TBz9LxOYG4wWaDEjNoIowrnXijgmmqiq4HHVk13sxKkl2mr3JuOqahYzLlWMLCyVEubNA4C+PIipcQa9cpEainIR0UNZMt2wQLV6CTf8oS+DwRiv/4M4pRjpqk+DX6fffn1w+zqr6FbGv5tkrzHF1E7WFQHLsxh6SEawdmZr2xwcgIXjcJhZK2FnilnS0wqj8iUs3A0MYW1XFcrnke27XoZqS+oAZntXftX5qW133Hn1AlT1TwkOs2SsGDIVZu3V6UnUe1UaSiwfepsR6UTT2w1xXwfXLs6Kj0KwV9XfQrADw38P4psqGErpNwBm4tCGxbaCSCvOxExKxMZ2jobucxTsGUyo31qZI26uAV9bth+0i9/7McDh6e8qUHvVsoqLB250ak55FemFMxZfG+T0c0t5QzgDWJKQyBtnT5wZY+/T0p6OxPiHhY00TXAsUmuVrYjzrGsoM5Na8qcUYWIVXNpDwvPAGNGXYtLq5NU2GHhNuGLxe09UtWr9Y/31QewJWrEosh01NY8ggn81IojnREZDQUdD5hyZRnOJnXraoj1njxjqGZ7x3zUH0Ph7Wj5fkY9rc7zyvvwunloKiWRoi6phkC0UJjC2iTTq0YjGr1hwN3MXU/bjsVV19qJgjIys22dr3Mh9dOzcCpilpbLc6aoe5net6/YKcPvbERb9I1OqQKD/cdMGDYOEZ3tFU3GcT/UIQjaVoMw+qu+1JFqtqJzC6w0TlO5qxAYE6SqfcK6JoTp8KGGb8v1ysJKkbOxp0DS3RES05/NAI2m4AxrAvbad6UzaLvcqPcOhvI2F9xYNyJXYs6TUsxd44JCZTvqigSvKAH5dh2zopZtjVi9+HZ06NrSUdnpAS2fvA8+Edpyr78BuYx390BKcJdO3RHbcNzl02sT3925n0t+yvkEU9Tt+dvP7NfuWq+L6tpskPTl6Pry29QOjkUck1dj+ESZNt277xq2mjnBkvVAJQglufOqkeHPpfWAJCg4L0nnRrEwiV0KVrfmMkU9GvZgjSxz+48m3kXHKr/XoNKiBhA3Nih3a5bdWJo1qWKDMX14hjBWrAHXdsVTdACV/7eYAEeNIjHyrPEGDnHn3aT/H6AvBRI=</source>
  </file>
  <file path="Relation/Definition.php" generated-path="Relation.Definition.html" hash="56b2fbd4cb75b2456a407f340701ec35" package="global">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="LiquidWeb\NetMapSvc\Relation" line="12" package="global">
      <extends/>
      <name>Relation</name>
      <full_name>\LiquidWeb\NetMapSvc\Relation\Relation</full_name>
      <docblock line="12">
        <description></description>
        <long-description></long-description>
        <tag name="author" line="12" description="Jason Gillman Jr. &lt;jgillman@liquidweb.com&gt;&#10;This class defines a relation object"/>
      </docblock>
      <property static="false" visibility="private" namespace="LiquidWeb\NetMapSvc\Relation" line="19" package="global">
        <name>$relationType</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::relationType</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;The relation type&lt;/p&gt;" type="string" variable="$relationType">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="LiquidWeb\NetMapSvc\Relation" line="26" package="global">
        <name>$neo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::neo4jObj</full_name>
        <default></default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="26" description="&lt;p&gt;The neo4j object&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="LiquidWeb\NetMapSvc\Relation" line="33" package="global">
        <name>$startObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::startObj</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;The local object representing the starting node&lt;/p&gt;" type="object" variable="$startObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="LiquidWeb\NetMapSvc\Relation" line="40" package="global">
        <name>$endObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::endObj</full_name>
        <default></default>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="40" description="&lt;p&gt;The local object representing the ending node&lt;/p&gt;" type="object" variable="$endObj">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="LiquidWeb\NetMapSvc\Relation" line="47" package="global">
        <name>$relationProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::relationProperties</full_name>
        <default></default>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="47" description="&lt;p&gt;The properties of the relation&lt;/p&gt;" type="array" variable="$relationProperties">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="59" package="global">
        <name>__construct</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::__construct()</full_name>
        <docblock line="59">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="59" description="&lt;p&gt;The neo4j ID of the starting node&lt;/p&gt;" type="integer" variable="$startId">
            <type>integer</type>
          </tag>
          <tag name="param" line="59" description="&lt;p&gt;The neo4j ID of the end node&lt;/p&gt;" type="integer" variable="$endId">
            <type>integer</type>
          </tag>
          <tag name="param" line="59" description="&lt;p&gt;The relation type&lt;/p&gt;" type="string" variable="$relationType">
            <type>string</type>
          </tag>
          <tag name="param" line="59" description="&lt;p&gt;Properties of the relation (if any)&lt;/p&gt;" type="array" variable="$relationProperties">
            <type>array</type>
          </tag>
          <tag name="throws" line="59" description="Throws an exception if there is a problem creating the relation" type="\LiquidWeb\NetMapSvc\Relation\Exception">
            <type>\LiquidWeb\NetMapSvc\Relation\Exception</type>
          </tag>
          <tag name="throws" line="59" description="Throws an exception if there is a problem validating the relation" type="\LiquidWeb\NetMapSvc\Relation\Exception">
            <type>\LiquidWeb\NetMapSvc\Relation\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$startId</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$endId</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$relationType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$relationProperties</name>
          <default>NULL</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="LiquidWeb\NetMapSvc\Relation" line="96" package="global">
        <name>validate</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::validate()</full_name>
        <docblock line="96">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="96" description="If the relation isn't valid, then throw an error, otherwise, be quiet" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="96" description="" type="\LiquidWeb\NetMapSvc\Relation\Exception">
            <type>\LiquidWeb\NetMapSvc\Relation\Exception</type>
          </tag>
          <tag name="throws" line="96" description="This is for validating the relation" type="\LiquidWeb\NetMapSvc\Relation\Exception">
            <type>\LiquidWeb\NetMapSvc\Relation\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="115" package="global">
        <name>setProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::setProperties()</full_name>
        <docblock line="115">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="115" description="&lt;p&gt;An array of properties&lt;/p&gt;" type="array" variable="$relationProperties">
            <type>array</type>
          </tag>
          <tag name="return" line="115" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$relationProperties</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="125" package="global">
        <name>getProperties</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::getProperties()</full_name>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="125" description="An array of set properties for the relation" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="135" package="global">
        <name>removeProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::removeProperty()</full_name>
        <docblock line="135">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="135" description="&lt;p&gt;The property to remove&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="147" package="global">
        <name>setProperty</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::setProperty()</full_name>
        <docblock line="147">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="147" description="&lt;p&gt;The property&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="147" description="&lt;p&gt;The property value&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="147" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="160" package="global">
        <name>setNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::setNeo4jObj()</full_name>
        <docblock line="160">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="160" description="&lt;p&gt;The neo4j relation object&lt;/p&gt;" type="object" variable="$neo4jObj">
            <type>object</type>
          </tag>
          <tag name="return" line="160" description="Sets the neo4j relation object" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$neo4jObj</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="177" package="global">
        <name>getNeo4jObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::getNeo4jObj()</full_name>
        <docblock line="177">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="177" description="The neo4j object if set" type="object|null">
            <type>object</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="195" package="global">
        <name>getStartObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::getStartObj()</full_name>
        <docblock line="195">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="195" description="The starting object" type="object">
            <type>object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="205" package="global">
        <name>getEndObj</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::getEndObj()</full_name>
        <docblock line="205">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="205" description="The ending object" type="object">
            <type>object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="LiquidWeb\NetMapSvc\Relation" line="215" package="global">
        <name>getType</name>
        <full_name>\LiquidWeb\NetMapSvc\Relation\Relation::getType()</full_name>
        <docblock line="215">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="215" description="The relation type" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50005">No summary for class \LiquidWeb\NetMapSvc\Relation\Relation</error>
      <error line="59" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="96" code="PPC:ERR-50008">No summary for method validate()</error>
      <error line="115" code="PPC:ERR-50008">No summary for method setProperties()</error>
      <error line="125" code="PPC:ERR-50008">No summary for method getProperties()</error>
      <error line="135" code="PPC:ERR-50008">No summary for method removeProperty()</error>
      <error line="147" code="PPC:ERR-50008">No summary for method setProperty()</error>
      <error line="160" code="PPC:ERR-50008">No summary for method setNeo4jObj()</error>
      <error line="177" code="PPC:ERR-50008">No summary for method getNeo4jObj()</error>
      <error line="195" code="PPC:ERR-50008">No summary for method getStartObj()</error>
      <error line="205" code="PPC:ERR-50008">No summary for method getEndObj()</error>
      <error line="215" code="PPC:ERR-50008">No summary for method getType()</error>
    </parse_markers>
    <source>eJylV99v2zYQfrb/imsRzFLhJi99WpqkQxtsLhI3WLLtoS4CWj7bTGRKIyknxpb/fUeKoiRbkt0VSGxL5P367u478v1Fukz7gq1QpSxCuOJ/Z3z2F04nY9TXLL1dR5PfMWaaJ+K0nymEScOW036/d/LmTb8H9h8+sEwvEwmfmUoE/MrjeMUEfJbH8P5hkT99iK2aJ5weR8nq3IveLbmCKGZKwQznXKACBtJ5AMn0ASNdbD7p9/KdhYf93j/9Xu6J0ZV/flgzCUpLLhZwVGi626RItrBUrelNRYx091LJ10xjXcrE2mgi9w2OBCbvHr5MH6x6++DdbtZeCOzVrDSTutAcJxGLiyWJqUSFQpsgNa3areZBJLPWsAp9ew2jmB1mljbuM5rrajXJpGSbEvEbmaRIkVAZGOtp+ZjMrUXpU9+dulJRzbSznDLJVsCFxgVKB8xoVsng6FNhsAHZbXEKsUWYVnblvqc2nUg7SjetCEHA58DEJnSa9FImTwounyNM7fpd/oI6Ff07bnVIBG76kOCfxriCSCLzOa9n4EfUrlnMZy2Ky8xm05hHMM9EZFXd30eJIAizSAdF4oYuB8M6qMMO3M5g/MfVlcHGUEhPy435sr97R5pI6e25bz/a68lxTNmczGWyGptUew/C06qk658uOetvXapWD2cNLOTddH4Wgg5HDJy+F/sZMR0tg0mZmCMMq8I2cVSxT1DuCQaXUhKRt2TmZxjAMel5e76gwFAptiCj3qr94vOAq3sLfNAAfBg2BKBQlzsapSqB2Y+24HK9XaH5Wj4kKGPrpYE/JOpMClgnfAajrbbjSgx0juDQrFA7W3dMQxgPhpCYXnjiigp0ikBjEXVLM3W9ztfs/KS/eXvWtvrJMaVvqLJ6imagFL6yCbx/xM09PnOlKSu7RUrtVu8Us0zkhmv80ygtxrQiOEM4OYERuaqJAKzJOt1d7MueHQc0/HFGxFuXhcnAprChjY5hMBkYfETicmKR2iF2CEafXCFsh0RVMXYTOwjt42gWhEZzOCiqpECNi6Lyq0RQwmJY4KM5wgThd4D3tSGybzmiH5cYPYJOYMUeKaSMKNbERirJT8u2qZmhktuUu8i358xe3J26gMIJm+EqAu0AqzkLNV9qKqvRdnfjvhn5i3CLNCHLE8VuK3cPnjpJtVrzXbQVRm32NB5TOqkmt1eNhPypno+2Ae0OZlELxvvsjLW63uZk/WDjvNpUj3AbU6QSV8kauz3L9ziT1EiFvPcxExT5Nh2VLn71Et/CH3C3tnPFn4l2jqhyM6wHZV/9/0qqxDd0+vfXTyVCU0pWqjvSjqvKzlWrPRS4Ra1sjbWLdsXsiWFyuUa5oUvhxL7yF0615GnpZHUc+ZeWUgwjEKmcnRWF6t9ZTrz2VMj1IHdY8sVSb9Gdk/WYnFVvZsU5A2O1lyGvuVqZ40j1UFGlsybfiRALPqxQXhnHIaePHPZ/RRbHO3dPc+JWuCcnP9XYugr3FjSvytOyQ6JOFM24mVzY48mSRY8bmPNngodOO5J6iciArpJrukrC65vfbmCcaB4RYPBFxKaraGDRFYH2z+nWICLiN7VMsnhmDky5bVIy3ZQbXlcSaxHJXT6teWsWDkfWgupPCYcUOeF566Z5G6eWd/BDPXB37APtX9pB3Ga9uIx32na82Hwj7bKd1273LMkvMzYDL/2L8/5/JGaiiA==</source>
  </file>
  <package name="global" full_name="global"/>
  <namespace name="LiquidWeb" full_name="LiquidWeb">
    <namespace name="NetMapSvc" full_name="LiquidWeb\NetMapSvc">
      <namespace name="Node" full_name="LiquidWeb\NetMapSvc\Node"/>
      <namespace name="Paths" full_name="LiquidWeb\NetMapSvc\Paths"/>
      <namespace name="Relation" full_name="LiquidWeb\NetMapSvc\Relation"/>
    </namespace>
  </namespace>
  <deprecated count="0"/>
</project>
