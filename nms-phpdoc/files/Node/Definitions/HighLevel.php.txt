<?php
namespace LiquidWeb\NetMapSvc\Node;
	
	/**
	 * 
	 * @author Jason Gillman Jr. <jgillman@liquidweb.com>
	 *
	 */

	class datacenter extends genericNode
	{
		public function __construct($name, array $propTraits = NULL)
		{
			
			$this->nodeProperties['streetAddress']['type'] = 'string';
			$this->nodeProperties['streetAddress']['required'] = TRUE;
			
			$this->nodeProperties['city']['type'] = 'string';
			$this->nodeProperties['city']['required'] = TRUE;
			
			$this->nodeProperties['state']['type'] = 'string';
			$this->nodeProperties['state']['required'] = FALSE;
			
			$this->nodeProperties['zip']['type'] = 'string';
			$this->nodeProperties['zip']['required'] = FALSE;
			
			$this->nodeProperties['country']['type'] = 'string';
			$this->nodeProperties['country']['required'] = TRUE;
			
			$this->nodeProperties['designator']['type'] = 'string';
			$this->nodeProperties['designator']['required'] = TRUE;
			
			$this->nodeType = 'Datacenter';

			$this->validRelations['contains'] = array('section', 'row', 'rack');

			parent::__construct($name, $propTraits);
		}
	}
	
	class popSite extends datacenter
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeProperties['providers']['type'] = 'arrayString';
			$this->nodeProperties['providers']['required'] = FALSE;
			
			$this->nodeType = 'POP Site';

			$this->validRelations['contains'] = array('section', 'row', 'rack'); // Re entered for consistency despite already having this due to inheritence from the datacenter class

			parent::__construct($name, $propTraits);
		}
	}
	
	class section extends genericNode
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeProperties['designator']['type'] = 'string';
			$this->nodeProperties['designator']['required'] = TRUE;
			
			$this->nodeType = 'Section';

			$this->validRelations['contains'] = array('row');

			parent::__construct($name, $propTraits);
		}
	}
	
	class row extends genericNode
	{	
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeProperties['designator']['type'] = 'string';
			$this->nodeProperties['designator']['required'] = TRUE;
			
			$this->nodeType = 'Row';

			$this->validRelations['contains'] = array('rack');

			parent::__construct($name, $propTraits);
		}
	}
	
	class rack extends genericNode
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeProperties['designator']['type'] = 'string';
			$this->nodeProperties['designator']['required'] = TRUE;
			
			$this->nodeType = 'Rack';

			$this->validRelations['contains'] = array('router', 'server', 'netSwitch', 'firewall', 'loadBalancer');

			parent::__construct($name, $propTraits);
		}
	}
	
	abstract class genericNetworking extends genericNode
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeProperties['vendor']['type'] = 'string';
			$this->nodeProperties['vendor']['required'] = FALSE;
			
			$this->nodeProperties['model']['type'] = 'string';
			$this->nodeProperties['model']['required'] = FALSE;
			
			$this->nodeProperties['serialNumber']['type'] = 'string';
			$this->nodeProperties['serialNumber']['required'] = FALSE;
			
			$this->nodeProperties['vlans']['type'] = 'arrayInt';
			$this->nodeProperties['vlans']['required'] = FALSE;

			parent::__construct($name, $propTraits);
		}
	}
	
	class router extends genericNetworking
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeProperties['routerType']['type'] = 'string';
			$this->nodeProperties['routerType']['required'] = TRUE;
			
			$this->nodeType = 'Router';

			$this->validRelations['announces'] = array('ipNet');
			$this->validRelations['contains'] = array('physIface');

			parent::__construct($name, $propTraits);
		}
	}
	
	class netSwitch extends genericNetworking // Using netSwitch due to reserved word conflict with switch
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeProperties['switchType']['type'] = 'string';
			$this->nodeProperties['switchType']['required'] = TRUE;
			
			$this->nodeType = 'Switch';

			$this->validRelations['announces'] = array('ipNet');
			$this->validRelations['contains'] = array('physIface');

			parent::__construct($name, $propTraits);
		}
	}
	
	class firewall extends genericNetworking
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeProperties['mode']['type'] = 'string';
			$this->nodeProperties['mode']['required'] = TRUE;
			
			$this->nodeType = 'Firewall';

			$this->validRelations['contains'] = array('physIface');

			parent::__construct($name, $propTraits);
		}
	}
	
	class loadBalancer extends genericNode
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeType = 'Load Balancer';

			$this->validRelations['contains'] = array('physIface');
			$this->validRelations['belongs_to'] = array('lbCluster');

			parent::__construct($name, $propTraits);
		}
	}
	
	class server extends genericNode
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeType = 'Server';

			$this->validRelations['contains'] = array('physIface');
			$this->validRelations['announces'] = array('ipNet');
			$this->validRelations['parent_of'] = array('virtServer');

			parent::__construct($name, $propTraits);
		}
	}
	
	class virtServer extends genericNode
	{
		public function __construct($name, array $propTraits = NULL)
		{

			$this->nodeType = 'Virtual Server';

			$this->validRelations['contains'] = array('virtIface');

			parent::__construct($name, $propTraits);
		}
	}
?>

