<?php
namespace LiquidWeb\NetMapSvc\Relation;
use \LiquidWeb\NetMapSvc;

	/**
	 *
	 * @author Jason Gillman Jr. <jgillman@liquidweb.com>
	 *
	 * This class defines a relation object
	 *
	 */
	class Relation
	{
		/**
		 * 
		 * @var string $relationType The relation type
		 * 
		 */
		private $relationType;

		/**
		 * 
		 * @var object $neo4jObj The neo4j object
		 * 
		 */
		private $neo4jObj;

		/**
		 * 
		 * @var object $startObj The local object representing the starting node
		 * 
		 */
		private $startObj;

		/**
		 * 
		 * @var object $endObj The local object representing the ending node
		 * 
		 */
		private $endObj;

		/**
		 * 
		 * @var array $relationProperties The properties of the relation
		 * 
		 */
		private $relationProperties;

		/**
		 *
		 * @param integer $startId The neo4j ID of the starting node
		 * @param integer $endId The neo4j ID of the end node
		 * @param string $relationType The relation type
		 * @param array $relationProperties Properties of the relation (if any)
		 * @throws Exception Throws an exception if there is a problem creating the relation
		 * @throws Exception Throws an exception if there is a problem validating the relation
		 *
		 */
		public function __construct($startId, $endId, $relationType, array $relationProperties = NULL)
		{
			try
			{
				$this->startObj = NetMapSvc\Node\fromNeo4j($startId);
				$this->endObj = NetMapSvc\Node\fromNeo4j($endId);
				$this->relationType = $relationType;

				try
				{
					$this->validate();
				}
				catch(\Exception $e)
				{
					throw new \Exception('Error validating the relation: ' . $e->getMessage());
				}

				if(is_array($relationProperties))
				{
					$this->setProperties($relationProperties);
				}
			}
			catch(\Exception $e)
			{
				throw new \Exception('Error creating relation: ' . $e->getMessage());
			}
		}

		/**
		 *
		 * @return void If the relation isn't valid, then throw an error, otherwise, be quiet
		 * @throws Exception
		 * @throws Exception
		 *
		 * This is for validating the relation
		 *
		 */
		private function validate()
		{
			if(!array_key_exists($this->relationType, $this->startObj->retrieveValidRelations())) // Is it a valid relation type?
			{
				throw new \Exception('The passed in relation type \'' . $this->relationType . '\' is not valid for the starting node (ID: ' . $this->startObj->getNeo4jObj()->getId() . ')');
			}

			if(!in_array($this->endObj->retrieveNodeClass(), $this->startObj->retrieveValidRelations()[$this->relationType])) // Check to make sure the target is appropriate for the relation type
			{
				throw new \Exception('The target (end) node (ID: ' . $this->endObj->getNeo4jObj()->getId() . ') is not valid for the relation type: ' . $this->relationType);
			}
		}

		/**
		 *
		 * @param array $relationProperties An array of properties
		 * @return void
		 *
		 */
		public function setProperties(array $relationProperties)
		{
			$this->relationProperties = $relationProperties;
		}

		/**
		 *
		 * @return array An array of set properties for the relation
		 *
		 */
		public function getProperties()
		{
			return $this->relationProperties;
		}

		/**
		 *
		 * @param string $property The property to remove
		 *
		 */
		public function removeProperty($property)
		{
			unset($this->relationProperties[$property]);
		}

		/**
		 *
		 * @param string $property The property
		 * @param mixed $value The property value
		 * @return void
		 *
		 */
		public function setProperty($property, $value)
		{
			$this->relationProperties[$property] = $value;
		}

		/**
		 *
		 * @param object $neo4jObj The neo4j relation object
		 * @return void
		 *
		 * Sets the neo4j relation object
		 *
		 */
		public function setNeo4jObj(\Everyman\Neo4j\Relationship $neo4jObj)
		{
			if($neo4jObj->getType() == $this->getType()) // Make sure it's the right type
			{
				$this->neo4jObj = $neo4jObj;
			}
			else
			{
				throw new \Exception('Mismatching relation type: ' . $neo4jObj->getType() . ' is not ' . $this->getType());
			}
		}

		/**
		 *
		 * @return object|null The neo4j object if set
		 *
		 */
		public function &getNeo4jObj()
		{
			if($this->neo4jObj != NULL)
			{
				return $this->neo4jObj;
			}
			else // This hacky fix required to prevent "PHP Notice:  Only variable references should be returned by reference"
			{
				$null = NULL;
				return $null;
			}
		}

		/**
		 *
		 * @return object The starting object
		 *
		 */
		public function getStartObj()
		{
			return $this->startObj;
		}

		/**
		 *
		 * @return object The ending object
		 *
		 */
		public function getEndObj()
		{
			return $this->endObj;
		}

		/**
		 *
		 * @return string The relation type
		 *
		 */
		public function getType()
		{
			return $this->relationType;
		}
	}
?>

